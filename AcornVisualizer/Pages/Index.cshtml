@page
@model AcornVisualizer.Pages.IndexModel
@{
    ViewData["Title"] = "AcornDB Visualizer";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/canopy.css" />
</head>
<body>
    <div class="container">
        <header>
            <h1>üå∞ AcornDB Visualizer</h1>
            <p class="subtitle">Live Grove Explorer</p>
        </header>

        <div class="stats-panel">
            <div class="stat-card">
                <div class="stat-value" id="totalTrees">-</div>
                <div class="stat-label">Trees</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalNuts">-</div>
                <div class="stat-label">Total Nuts</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalStashed">-</div>
                <div class="stat-label">Stashed</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalTossed">-</div>
                <div class="stat-label">Tossed</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="totalSquabbles">-</div>
                <div class="stat-label">Squabbles</div>
            </div>
        </div>

        <div class="management-section">
            <h2>üîß Grove Management</h2>

            <!-- Add Local Tree Section -->
            <div class="management-card">
                <h3>üìÅ Add Local FileTrunk Tree</h3>
                <p class="help-text">Connect to an existing FileTrunk by providing its directory path</p>
                <div class="form-row">
                    <input type="text" id="localTreeName" placeholder="Tree Name (e.g., LocalUsers)" class="form-input" />
                    <input type="text" id="localTreePath" placeholder="File Path (e.g., ./data/users)" class="form-input" />
                    <button onclick="addLocalTree()" class="btn-add">‚ûï Add Tree</button>
                </div>
                <div id="addTreeStatus" class="status-message"></div>
            </div>

            <!-- Network Discovery Section -->
            <div class="management-card">
                <h3>üîç Network Discovery</h3>
                <p class="help-text">Discover and connect to AcornDB groves on your local network</p>
                <div class="form-row">
                    <button id="discoveryToggle" onclick="toggleDiscovery()" class="btn-discovery">‚ñ∂Ô∏è Start Discovery</button>
                    <span id="discoveryStatus" class="status-badge">Stopped</span>
                </div>
                <div id="discoveredGroves" class="discovered-groves">
                    <p class="placeholder">Start discovery to find groves on your network</p>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="trees-panel">
                <h2>üå≥ Trees in Grove</h2>
                <div id="treesList"></div>
            </div>

            <div class="detail-panel">
                <h2 id="detailTitle">Select a Tree</h2>
                <div id="treeDetail">
                    <p class="placeholder">Click on a tree to view its contents</p>
                </div>
            </div>
        </div>

        <div class="actions">
            <button onclick="refreshData()" class="btn-refresh">üîÑ Refresh</button>
            <a href="/Visualizer" class="btn-visualize">üìä Graph View</a>
        </div>
    </div>

    <script src="~/canopy.js"></script>
    <script>
        let discoveryInterval = null;
        let isDiscoveryRunning = false;

        // Add local tree functionality
        async function addLocalTree() {
            const name = document.getElementById('localTreeName').value.trim();
            const path = document.getElementById('localTreePath').value.trim();
            const statusDiv = document.getElementById('addTreeStatus');

            if (!name || !path) {
                showStatus(statusDiv, '‚ùå Please provide both tree name and file path', 'error');
                return;
            }

            try {
                const response = await fetch('/api/GroveManagement/add-local-tree', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ typeName: name, filePath: path })
                });

                const result = await response.json();

                if (response.ok) {
                    showStatus(statusDiv, `‚úÖ ${result.message}`, 'success');
                    document.getElementById('localTreeName').value = '';
                    document.getElementById('localTreePath').value = '';
                    // Refresh the trees list
                    setTimeout(refreshData, 500);
                } else {
                    showStatus(statusDiv, `‚ùå ${result.message}`, 'error');
                }
            } catch (error) {
                showStatus(statusDiv, `‚ùå Failed to add tree: ${error.message}`, 'error');
            }
        }

        // Discovery toggle functionality
        async function toggleDiscovery() {
            const button = document.getElementById('discoveryToggle');
            const statusBadge = document.getElementById('discoveryStatus');

            try {
                if (isDiscoveryRunning) {
                    // Stop discovery
                    const response = await fetch('/api/Discovery/stop', { method: 'POST' });
                    const result = await response.json();

                    if (response.ok) {
                        isDiscoveryRunning = false;
                        button.textContent = '‚ñ∂Ô∏è Start Discovery';
                        button.classList.remove('btn-stop');
                        button.classList.add('btn-discovery');
                        statusBadge.textContent = 'Stopped';
                        statusBadge.classList.remove('status-running');

                        // Clear interval
                        if (discoveryInterval) {
                            clearInterval(discoveryInterval);
                            discoveryInterval = null;
                        }

                        // Clear discovered groves
                        document.getElementById('discoveredGroves').innerHTML = '<p class="placeholder">Start discovery to find groves on your network</p>';
                    }
                } else {
                    // Start discovery
                    const response = await fetch('/api/Discovery/start', { method: 'POST' });
                    const result = await response.json();

                    if (response.ok) {
                        isDiscoveryRunning = true;
                        button.textContent = '‚è∏Ô∏è Stop Discovery';
                        button.classList.remove('btn-discovery');
                        button.classList.add('btn-stop');
                        statusBadge.textContent = 'Running';
                        statusBadge.classList.add('status-running');

                        // Start polling for discovered groves
                        refreshDiscoveredGroves();
                        discoveryInterval = setInterval(refreshDiscoveredGroves, 3000);
                    }
                }
            } catch (error) {
                console.error('Discovery toggle failed:', error);
            }
        }

        // Refresh discovered groves
        async function refreshDiscoveredGroves() {
            try {
                const response = await fetch('/api/Discovery/status');
                const data = await response.json();

                if (data.discoveredGroves && data.discoveredGroves.length > 0) {
                    renderDiscoveredGroves(data.discoveredGroves);
                } else if (isDiscoveryRunning) {
                    document.getElementById('discoveredGroves').innerHTML = '<p class="placeholder">Scanning for groves... No groves found yet.</p>';
                }
            } catch (error) {
                console.error('Failed to refresh discovered groves:', error);
            }
        }

        // Render discovered groves
        function renderDiscoveredGroves(groves) {
            const container = document.getElementById('discoveredGroves');

            if (groves.length === 0) {
                container.innerHTML = '<p class="placeholder">No groves discovered</p>';
                return;
            }

            let html = '<div class="grove-list">';
            groves.forEach(grove => {
                const lastSeenText = getTimeAgo(grove.lastSeen);
                const connectedClass = grove.isConnected ? 'connected' : '';

                html += `
                    <div class="grove-item ${connectedClass}">
                        <div class="grove-info">
                            <div class="grove-name">üå≥ ${grove.address}:${grove.port}</div>
                            <div class="grove-meta">${grove.treeCount} trees ¬∑ Last seen ${lastSeenText}</div>
                        </div>
                        <div class="grove-actions">
                            ${grove.isConnected
                                ? '<span class="badge-connected">‚úÖ Connected</span>'
                                : `<button onclick="connectToGrove('${grove.id}')" class="btn-connect">üîó Connect</button>`
                            }
                        </div>
                    </div>
                `;
            });
            html += '</div>';

            container.innerHTML = html;
        }

        // Connect to a discovered grove
        async function connectToGrove(groveId) {
            try {
                const response = await fetch(`/api/Discovery/connect/${encodeURIComponent(groveId)}`, {
                    method: 'POST'
                });

                const result = await response.json();

                if (response.ok) {
                    console.log(`Connected to grove: ${groveId}`);
                    // Refresh discovered groves to update UI
                    refreshDiscoveredGroves();
                    // Refresh trees list
                    refreshData();
                } else {
                    console.error(`Failed to connect: ${result.message}`);
                }
            } catch (error) {
                console.error('Connection failed:', error);
            }
        }

        // Helper function to show status messages
        function showStatus(element, message, type) {
            element.textContent = message;
            element.className = `status-message ${type}`;
            setTimeout(() => {
                element.textContent = '';
                element.className = 'status-message';
            }, 5000);
        }

        // Helper function to format time ago
        function getTimeAgo(timestamp) {
            const now = new Date();
            const then = new Date(timestamp);
            const diffMs = now - then;
            const diffSec = Math.floor(diffMs / 1000);

            if (diffSec < 10) return 'just now';
            if (diffSec < 60) return `${diffSec}s ago`;
            const diffMin = Math.floor(diffSec / 60);
            if (diffMin < 60) return `${diffMin}m ago`;
            const diffHour = Math.floor(diffMin / 60);
            return `${diffHour}h ago`;
        }

        // Auto-refresh every 5 seconds
        setInterval(refreshData, 5000);

        // Initial load
        refreshData();

        // Check discovery status on load
        fetch('/api/Discovery/status')
            .then(response => response.json())
            .then(data => {
                if (data.isRunning) {
                    isDiscoveryRunning = true;
                    document.getElementById('discoveryToggle').textContent = '‚è∏Ô∏è Stop Discovery';
                    document.getElementById('discoveryToggle').classList.remove('btn-discovery');
                    document.getElementById('discoveryToggle').classList.add('btn-stop');
                    document.getElementById('discoveryStatus').textContent = 'Running';
                    document.getElementById('discoveryStatus').classList.add('status-running');

                    refreshDiscoveredGroves();
                    discoveryInterval = setInterval(refreshDiscoveredGroves, 3000);
                }
            })
            .catch(error => console.error('Failed to check discovery status:', error));
    </script>
</body>
</html>
