@page
@model AcornVisualizer.Pages.VisualizerModel
@{
    ViewData["Title"] = "Grove Graph Visualizer";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/canopy.css" />
    <style>
        .graph-container {
            width: 100%;
            height: 600px;
            border: 2px solid #8B4513;
            border-radius: 8px;
            background: #f5f5dc;
            position: relative;
            overflow: hidden;
        }

        .tree-node {
            position: absolute;
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #8B4513 0%, #A0522D 100%);
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            cursor: pointer;
            transition: transform 0.2s;
        }

        .tree-node:hover {
            transform: scale(1.1);
        }

        .tree-node .type {
            font-size: 14px;
        }

        .tree-node .count {
            font-size: 24px;
            margin-top: 5px;
        }

        .tree-node .trunk-badge {
            position: absolute;
            top: -10px;
            right: -10px;
            background: #FFD700;
            color: #333;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .connection-line {
            position: absolute;
            height: 2px;
            background: #8B4513;
            transform-origin: left center;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üå≤ Grove Graph Visualizer</h1>
            <p class="subtitle">Interactive Tree Network</p>
        </header>

        <div class="graph-container" id="graphCanvas">
            <!-- Trees will be rendered here by JavaScript -->
        </div>

        <div class="legend">
            <h3>Legend</h3>
            <div class="legend-item">
                <span class="badge" style="background: #FFD700;">‚öôÔ∏è</span>
                <span>Trunk Type Initial</span>
            </div>
            <div class="legend-item">
                <span class="badge" style="background: #8B4513; color: white;">üå∞</span>
                <span>Nut Count</span>
            </div>
        </div>

        <div class="actions">
            <a href="/" class="btn-back">‚Üê Back to List</a>
            <button onclick="refreshGraph()" class="btn-refresh">üîÑ Refresh</button>
        </div>
    </div>

    <script>
        let currentGraph = null;

        async function refreshGraph() {
            try {
                const response = await fetch('/api/GroveGraph');
                const graph = await response.json();
                currentGraph = graph;
                renderGraph(graph);
            } catch (error) {
                console.error('Failed to load graph:', error);
            }
        }

        function renderGraph(graph) {
            const canvas = document.getElementById('graphCanvas');
            canvas.innerHTML = '';

            if (!graph.trees || graph.trees.length === 0) {
                canvas.innerHTML = '<div style="padding: 40px; text-align: center; color: #666;">No trees in grove</div>';
                return;
            }

            // Calculate positions in a circle
            const centerX = canvas.offsetWidth / 2;
            const centerY = canvas.offsetHeight / 2;
            const radius = Math.min(centerX, centerY) - 80;

            graph.trees.forEach((tree, index) => {
                const angle = (index / graph.trees.length) * 2 * Math.PI - Math.PI / 2;
                const x = centerX + radius * Math.cos(angle) - 60;
                const y = centerY + radius * Math.sin(angle) - 60;

                const node = document.createElement('div');
                node.className = 'tree-node';
                node.style.left = x + 'px';
                node.style.top = y + 'px';

                // Trunk badge (first letter of trunk type)
                const badge = document.createElement('div');
                badge.className = 'trunk-badge';
                badge.textContent = tree.trunkType.charAt(0);
                badge.title = tree.trunkType;
                node.appendChild(badge);

                // Type name
                const typeName = document.createElement('div');
                typeName.className = 'type';
                typeName.textContent = tree.typeName;
                node.appendChild(typeName);

                // Nut count
                const count = document.createElement('div');
                count.className = 'count';
                count.textContent = 'üå∞ ' + tree.nutCount;
                node.appendChild(count);

                // Click handler
                node.onclick = () => {
                    window.location.href = '/?tree=' + tree.id;
                };

                canvas.appendChild(node);
            });
        }

        // Auto-refresh
        setInterval(refreshGraph, 5000);
        refreshGraph();
    </script>
</body>
</html>
